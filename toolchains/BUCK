load("@prelude//tests:test_toolchain.bzl", "noop_test_toolchain")
load("@prelude//toolchains:python.bzl", "system_python_bootstrap_toolchain")
load("@prelude//toolchains:remote_test_execution.bzl", "remote_test_execution_toolchain")
load(":cxx.bzl", "cxx_toolchain")
load(":rust.bzl", "rust_toolchain")

system_python_bootstrap_toolchain(
    name = "python_bootstrap",
    visibility = ["PUBLIC"],
)

cxx_toolchain(
    name = "cxx",
    c_flags = select({
        "DEFAULT": [],
        "rust//constraints:opt-level=0": ["-O0"],
        "rust//constraints:opt-level=3": ["-O3"],
    }),
    cxx_flags = select({
        "DEFAULT": [],
        "prelude//os:linux": ["-stdlib=libstdc++"],
    }) + select({
        "DEFAULT": [],
        "rust//constraints:opt-level=0": ["-O0"],
        "rust//constraints:opt-level=3": ["-O3"],
    }),
    visibility = ["PUBLIC"],
)

rust_toolchain(
    name = "rust",
    clippy_driver = select({
        "rust//constraints:stage1": "rust//stage0:clippy-driver",
        "rust//constraints:stage2": "rust//stage1:clippy-driver",
    }),
    compiler = select({
        "rust//constraints:stage1": "rust//stage0:rustc",
        "rust//constraints:stage2": select({
            "rust//constraints:sysroot-deps=explicit": "rust//stage1:rustc",
            "rust//constraints:sysroot-deps=implicit": select({
                "rust//constraints:library": "rust//stage0:rustc",
                "rust//constraints:compiler": "rust//stage1:rustc",
            }),
        }),
    }),
    exec_compatible_with = [
        "rust//constraints:opt-level=0",
        "rust//constraints:sysroot-deps=implicit",
    ] + select({
        "rust//constraints:compiler": ["rust//constraints:compiler"],
        "rust//constraints:library": ["rust//constraints:library"],
    }) + select({
        "rust//constraints:stage1": ["rust//constraints:stage1"],
        "rust//constraints:stage2": ["rust//constraints:stage2"],
    }),
    rustc_flags = [
        "-Zunstable-options",
        select({
            "rust//constraints:opt-level=0": "-Copt-level=0",
            "rust//constraints:opt-level=3": "-Copt-level=3",
        }),
    ] + select({
        "rust//constraints:stage1": ["--cfg=bootstrap"],
        "rust//constraints:stage2": [],
    }) + select({
        "DEFAULT": [],
        "prelude//os:linux": ["-Clink-arg=-Wl,--undefined-version"],
    }),
    rustdoc = select({
        "rust//constraints:stage1": "rust//stage0:rustdoc",
        "rust//constraints:stage2": "rust//stage1:rustdoc",
    }),
    sysroot = select({
        "rust//constraints:sysroot-deps=explicit": None,
        "rust//constraints:sysroot-deps=implicit": select({
            "rust//constraints:library": "rust//stage0:sysroot",
            "rust//constraints:compiler": select({
                "rust//constraints:stage1": dict(
                    alloc = "rust//stage1:alloc",
                    compiler_builtins = "rust//stage1:compiler_builtins",
                    core = "rust//stage1:core",
                    panic_abort = "rust//stage1:panic_abort",
                    panic_unwind = "rust//stage1:panic_unwind",
                    proc_macro = "rust//stage1:proc_macro",
                    rust_allocator = "rust//stage1:rust_allocator",
                    std = "rust//stage1:std",
                    test = "rust//stage1:test",
                ),
                "rust//constraints:stage2": dict(
                    alloc = "rust//stage2:alloc",
                    compiler_builtins = "rust//stage2:compiler_builtins",
                    core = "rust//stage2:core",
                    panic_abort = "rust//stage2:panic_abort",
                    panic_unwind = "rust//stage2:panic_unwind",
                    proc_macro = "rust//stage2:proc_macro",
                    rust_allocator = "rust//stage2:rust_allocator",
                    std = "rust//stage2:std",
                    test = "rust//stage2:test",
                ),
            }),
        }),
    }),
    visibility = ["PUBLIC"],
)

noop_test_toolchain(
    name = "test",
    visibility = ["PUBLIC"],
)

remote_test_execution_toolchain(
    name = "remote_test_execution",
    visibility = ["PUBLIC"],
)
